// Generated by CoffeeScript 1.7.1
var D, H, InputLabel, Label, M, NOW, ReminderLabel, TODAY, W, Y, formatTime, humanName, pad, _l,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_l = function() {
  return Logger.log.apply(Logger, arguments);
};

D = new Date();

NOW = D.getTime();

TODAY = new Date(D.getFullYear(), D.getMonth(), D.getDate()).getTime();


function setup() {
  InputLabel.root().create()
  InputLabel.createAll();
  ReminderLabel.root().create()
}

function process() {
  InputLabel.processAll();
  ReminderLabel.processAll();
}
;

Label = (function() {
  var LABELS;

  LABELS = {};

  function Label(_arg) {
    this.name = _arg.name, this.instance = _arg.instance;
  }

  Label.prototype.create = function() {
    _l("create " + this.name);
    return this.instance || (this.instance = this.get() || GmailApp.createLabel(this.name));
  };

  Label.prototype["delete"] = function() {
    var _ref;
    _l("removing " + this.name);
    return (_ref = this.get()) != null ? _ref.deleteLabel() : void 0;
  };

  Label.prototype.get = function() {
    return this.instance || (this.instance = GmailApp.getUserLabelByName(this.name));
  };

  Label.prototype.threads = function() {
    var _ref;
    return (_ref = this.get()) != null ? _ref.getThreads() : void 0;
  };

  Label.prototype.isEmpty = function() {
    return !this.threads().length;
  };

  Label.prototype.moveTo = function(to, _arg) {
    var remove;
    remove = (_arg != null ? _arg : {}).remove;
    _l("         " + this.name + " -> " + to.name);
    to.create().addToThreads(this.threads());
    this.get().removeFromThreads(this.threads());
    if (remove) {
      return this["delete"]();
    }
  };

  Label.prototype.moveToInbox = function(_arg) {
    var remove;
    remove = (_arg != null ? _arg : {}).remove;
    _l("         " + this.name + " -> Inbox");
    GmailApp.moveThreadsToInbox(this.threads());
    this.get().removeFromThreads(this.threads());
    if (remove) {
      return this["delete"]();
    }
  };

  Label.byName = function(name, instance) {
    return LABELS[name] || (LABELS[name] = new this({
      name: name,
      instance: instance
    }));
  };

  Label.root = function() {
    return this.byName(this.ROOT);
  };

  Label.at = function(name) {
    return this.byName("" + (this.root().name) + "/" + name);
  };

  Label.forEach = function(method) {
    var l, _i, _len, _ref, _results;
    _ref = this.all();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _results.push(l[method]());
    }
    return _results;
  };

  Label.childrenOf = function(parent) {
    var l, _i, _len, _ref, _results;
    _ref = GmailApp.getUserLabels();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      if (l.getName().slice(0, parent.name.length + 1) === ("" + parent.name + "/")) {
        _results.push(this.byName(l.getName(), l));
      }
    }
    return _results;
  };

  return Label;

})();

H = 3600 * 1000;

D = 24 * H;

W = 7 * D;

M = 30 * D;

Y = 365 * D;

pad = function(n) {
  if (n < 10) {
    return "0" + n;
  } else {
    return n;
  }
};

formatTime = function(t) {
  var d, m, y, _h, _m;
  y = t.getFullYear();
  m = pad(t.getMonth() + 1);
  d = pad(t.getDate());
  _h = pad(t.getHours());
  _m = pad(t.getMinutes());
  return "" + y + "-" + m + "-" + d + " " + _h + ":" + _m;
};

humanName = function(ts) {
  return "" + (formatTime(new Date(ts))) + " - " + ts;
};

InputLabel = (function(_super) {
  var IN;

  __extends(InputLabel, _super);

  function InputLabel() {
    return InputLabel.__super__.constructor.apply(this, arguments);
  }

  InputLabel.ROOT = '#later';

  InputLabel.prototype.due_at = function() {
    var match, n, x, _;
    if (!(match = /^(?:.*\/)?(\d+)([hdwmy])$/.exec(this.name))) {
      throw "no match";
    }
    _ = match[0], n = match[1], x = match[2];
    switch (x) {
      case "h":
        return NOW + n * H;
      case "d":
        return TODAY + n * D;
      case "w":
        return TODAY + n * W;
      case "m":
        return TODAY + n * M;
      case "y":
        return TODAY + n * Y;
    }
  };

  InputLabel.prototype.reminder = function() {
    return ReminderLabel.at(humanName(this.due_at()));
  };

  InputLabel.prototype.process = function() {
    if (this.isEmpty()) {
      return;
    }
    return this.moveTo(this.reminder());
  };

  IN = ["1h", "2h", "3h", "4h", "8h", "10h", "12h", "1d", "2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d", "10d", "1w", "2w", "3w", "4w", "1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m", "10m", "11m", "1y"];

  InputLabel.all = function() {
    var n;
    return this["in"] || (this["in"] = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = IN.length; _i < _len; _i++) {
        n = IN[_i];
        _results.push(this.at(n));
      }
      return _results;
    }).call(this));
  };

  InputLabel.createAll = function() {
    return this.forEach('create');
  };

  InputLabel.processAll = function() {
    return this.forEach('process');
  };

  return InputLabel;

})(Label);

ReminderLabel = (function(_super) {
  __extends(ReminderLabel, _super);

  function ReminderLabel() {
    return ReminderLabel.__super__.constructor.apply(this, arguments);
  }

  ReminderLabel.ROOT = '#reminders';

  ReminderLabel.prototype.parent = function() {
    var match;
    if (!(match = /^(.*\/)/.exec(this.name))) {
      _l("no parent match: " + this.name);
      return;
    }
    return match[1];
  };

  ReminderLabel.prototype.due_at = function() {
    var match;
    if (!(match = /^.*\/(?:[0-9: -]* - )([0-9]+)$/.exec(this.name))) {
      _l("no match: " + this.name);
      return;
    }
    return parseInt(match[1], 10);
  };

  ReminderLabel.prototype.pastDue = function() {
    var n;
    return (n = this.due_at()) && (n < NOW);
  };

  ReminderLabel.processAll = function() {
    var l, _i, _len, _ref, _results;
    _l("processing at " + (humanName(NOW)));
    _ref = this.childrenOf(this.root());
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      l = _ref[_i];
      _l(l.name);
      if (l.pastDue()) {
        _results.push(l.moveToInbox({
          remove: true
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return ReminderLabel;

})(Label);
